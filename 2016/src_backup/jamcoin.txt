import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Locale;


public class Main implements Runnable {

    ///////////////////////
    // File name variables
//    final String problem = "A";
//    final String problem = "B";
    final String problem = "C";

    // final String filename = problem + "-sample";

    final String filename = problem + "-small-attempt0";
//    final String filename = problem + "-small-practice";
//    final String filename = problem + "-large-practice";
//     final String filename= problem+"-small-attempt1";
//     final String filename= problem+"-large";

    // Output Float format
    // e.g. out.write(df.format(T0));
    DecimalFormat df = new DecimalFormat("0.0000000");

    // Helper object
    static int MAX = (int)Math.pow(2.0, 20.0);
    HashMap<Integer, Boolean> primeMap = new HashMap<Integer, Boolean>();
    int[] primeNums = new int[MAX];

    //////////////////////////////////////////
    // Hard core function
    public void solve() throws Exception {
        out.write("\n");
        int N = iread(), J = iread();

        int countPrinted = 0, minN = (int)Math.pow(2, N-1) + 1, maxN = (int)Math.pow(2, N) - 1;

        int curCase = 0;

        for (int i = minN; i < maxN; i = i+2) {
            String binaryString = Integer.toBinaryString(i);
            String output = binaryString + " ";
            boolean validateCase = true;
            for (int baseNum = 2; baseNum <= 10; baseNum++) {
                long curNum = convertBinaryToDigital(binaryString, baseNum);
                int primeNum = primeDivider(curNum);
                if (primeNum == -1) {
                    validateCase = false;
                    break;
                }
                output += primeNum + " ";
            }
            if (validateCase) {
                curCase++;
                out.write(output.substring(0, output.length() -1) + "\n");
            }
            if (curCase >= J) {
                return;
            }
        }
    }

    private int primeDivider(long n) {
        for (int i = 0; i < MAX; i++) {
            if (primeNums[i] == 0) break;
            if (n / primeNums[i] != 1 && n / primeNums[i] * primeNums[i] == n) {
                return primeNums[i];
            }
        }
        return -1;
    }

    private long convertBinaryToDigital(String binaryStr, int base) {
        long ret = 0;
        long curBase = 1;

        for(int i=binaryStr.length()-1;i>=0;--i){
            ret += curBase * Integer.valueOf(binaryStr.charAt(i)-'0');
            curBase *= base;
        }
        return ret;
    }

    private void initPrimeMap() {

        for (int i = 2; i < MAX; i++) {
            primeMap.put(i, true);
        }
        for (int i = 2; i * i < MAX; i++) {
            for (int j = i; i * j < MAX; j++) {
                primeMap.put(i * j, false);
            }
        }
        int cur = 0;
        for (int i = 2; i < MAX; i++) {
            if (primeMap.get(i) == true) {
                primeNums[cur] = i;
                cur++;
            }
        }
    }

    //////////////////////////////////////////
    /// Helper functions
    public void solve_gcj() throws Exception {

        // Inital function
        initPrimeMap();
        long testResult = convertBinaryToDigital("1000000010111011", 3);
        System.out.println("test result is " + testResult);

        int tests = iread();
        for (int test = 1; test <= tests; test++) {
            out.write("Case #" + test + ": ");
            solve();
            out.write("\n");
        }
    }

    public void run() {
        try {
            // Helper in-&-out for local test
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new BufferedWriter(new OutputStreamWriter(System.out));

            // For real file input and output
//            in = new BufferedReader(new FileReader(filename + ".in"));
//            out = new BufferedWriter(new FileWriter(filename + ".out"));
            solve_gcj();
            out.flush();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public int iread() throws Exception {
        return Integer.parseInt(readword());
    }

    public double dread() throws Exception {
        return Double.parseDouble(readword());
    }

    public long lread() throws Exception {
        return Long.parseLong(readword());
    }

    BufferedReader in;

    BufferedWriter out;

    public String readword() throws IOException {
        StringBuilder b = new StringBuilder();
        int c;
        c = in.read();
        while (c >= 0 && c <= ' ')
            c = in.read();
        if (c < 0)
            return "";
        while (c > ' ') {
            b.append((char) c);
            c = in.read();
        }
        return b.toString();
    }

    /////////////////////////
    // Main Function
    public static void main(String[] args) {
        try {
            Locale.setDefault(Locale.US);
        } catch (Exception e) {

        }
        new Thread(new Main()).start();
    }
}
