import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.text.DecimalFormat;
import java.util.*;


public class Main implements Runnable {

    ///////////////////////
    // File name variables
//    final String problem = "A";
//    final String problem = "B";
//    final String problem = "C";
    final String problem = "D";

    // final String filename = problem + "-sample";

    final String filename = problem + "-small-attempt0";
//    final String filename = problem + "-small-practice";
//    final String filename = problem + "-large-practice";
//     final String filename= problem+"-small-attempt1";
//    final String filename= problem+"-small-attempt2";
//     final String filename= problem+"-large";

    // Output Float format
    // e.g. out.write(df.format(T0));
    DecimalFormat df = new DecimalFormat("0.0000000");

    //////////////////////////////////////////
    // Hard core function
    public void solve() throws Exception {
        int N = iread(), R = iread(), P = iread(), S = iread();
        boolean possible = false;
        if (N % 2 == 0) {
            int oddNumber = (calPower(2, N) - 1) / 3;
            int evenNumber = oddNumber + 1;
            possible = isPossible(oddNumber, evenNumber, R, P, S);
        } else {
            int oddNumber = (calPower(2, N) + 1) / 3;
            int evenNumber = oddNumber - 1;
            possible = isPossible(oddNumber, evenNumber, R, P, S);
        }

        if (!possible) {
            out.write("IMPOSSIBLE");
            return;
        }

        String result = divdeAndMergePrinter(N , R, P, S);
        out.write(result);
    }

    private String divdeAndMergePrinter(int N, int R, int P, int S) {
        if (N == 1) {
            if (R == 0) {
                return "PS";
            } else if (P == 0) {
                return "RS";
            } else {
                return "PR";
            }
        }

        String left = "", right = "";
        if (N % 2 == 0) {
            if (R % 2 == 0) {
                left = divdeAndMergePrinter(N - 1, R / 2, R / 2, R / 2 - 1);
                right = divdeAndMergePrinter(N - 1, R / 2, R / 2 - 1, R / 2);
            } else if (P % 2 == 0) {
                left = divdeAndMergePrinter(N - 1, P / 2 -1 , P / 2, P / 2);
                right = divdeAndMergePrinter(N - 1, P / 2, P / 2, P / 2 - 1);
            } else {
                left = divdeAndMergePrinter(N - 1, S / 2 -1 , S / 2, S / 2);
                right = divdeAndMergePrinter(N - 1, S / 2, S / 2 - 1, S / 2);
            }
        } else {
            if (R % 2 == 0) {
                left = divdeAndMergePrinter(N - 1, R / 2, R / 2, R / 2 + 1);
                right = divdeAndMergePrinter(N - 1, R / 2, R / 2 + 1, R / 2);
            } else if (P % 2 == 0) {
                left = divdeAndMergePrinter(N - 1, P / 2  + 1 , P / 2, P / 2);
                right = divdeAndMergePrinter(N - 1, P / 2, P / 2, P / 2 + 1);
            } else {
                left = divdeAndMergePrinter(N - 1, S / 2 + 1 , S / 2, S / 2);
                right = divdeAndMergePrinter(N - 1, S / 2, S / 2 + 1, S / 2);
            }
        }

        return compareMerge(left, right);
    }

    private int calPower(int K, int C) {
        int result = 1;
        for (int i = 0; i < C; i++) {
            result *= K;
        }
        return result;
    }

    private boolean isPossible(int odd, int even, int R, int P, int S) {
        if ((R == odd && P == odd && S == even) ||
                (R == odd && P == even && S == odd) ||
                (R == even && P == odd && S == odd)){
            return true;
        }
        return false;
    }

    private String compareMerge(String left, String right) {
        if (left.compareTo(right) > 0) {
            return right + left;
        } else {
            return left + right;
        }
    }

    //////////////////////////////////////////
    /// Helper functions
    public void solve_gcj() throws Exception {

        int tests = iread();
        for (int test = 1; test <= tests; test++) {
            out.write("Case #" + test + ": ");
            solve();
            out.write("\n");
        }
    }

    public void run() {
        try {
//            // Helper in-&-out for local test
//            in = new BufferedReader(new InputStreamReader(System.in));
//            out = new BufferedWriter(new OutputStreamWriter(System.out));

            // For real file input and output
            in = new BufferedReader(new FileReader(filename + ".in"));
            out = new BufferedWriter(new FileWriter(filename + ".out"));
            solve_gcj();
            out.flush();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public int iread() throws Exception {
        return Integer.parseInt(readword());
    }

    public double dread() throws Exception {
        return Double.parseDouble(readword());
    }

    public long lread() throws Exception {
        return Long.parseLong(readword());
    }

    BufferedReader in;

    BufferedWriter out;

    public String readword() throws IOException {
        StringBuilder b = new StringBuilder();
        int c;
        c = in.read();
        while (c >= 0 && c <= ' ')
            c = in.read();
        if (c < 0)
            return "";
        while (c > ' ') {
            b.append((char) c);
            c = in.read();
        }
        return b.toString();
    }

    public String readLine() throws IOException {
        StringBuilder b = new StringBuilder();
        int c;
        c = in.read();
        while (c != '\n') {
            b.append((char) c);
            c = in.read();
        }
        return b.toString();
    }

    /////////////////////////
    // Main Function
    public static void main(String[] args) {
        try {
            Locale.setDefault(Locale.US);
        } catch (Exception e) {

        }
        new Thread(new Main()).start();
    }
}


